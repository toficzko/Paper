From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 21 Jul 2018 14:27:34 -0400
Subject: [PATCH] Duplicate UUID Resolve Option

Due to a bug in https://github.com/PaperMC/Paper/commit/2e29af3df05ec0a383f48be549d1c03200756d24
which was added all the way back in March of 2016, it was unknown (potentially not at the time)
that an entity might actually change the seed of the random object.

At some point, EntitySquid did start setting the seed. Due to this shared random, this caused
every entity to use a Random object with a predictable seed.

This has caused entities to potentially generate with the same UUID....

Over the years, servers have had entities disappear, but no sign of trouble
because CraftBukkit removed the log lines indicating that something was wrong.

We have fixed the root issue causing duplicate UUID's, however we now have chunk
files full of entities that have the same UUID as another entity!

When these chunks load, the 2nd entity will not be added to the world correctly.

If that chunk loads in a different order in the future, then it will reverse and the
missing one is now the one added to the world and not the other. This results in very
inconsistent entity behavior.

This change allows you to recover any duplicate entity by generating a new UUID for it.
This also lets you delete them instead if you don't want to risk having new entities added to
the world that you previously did not see.

But for those who are ok with leaving this inconsistent behavior, you may use WARN or NOTHING options.

It is recommended you regenerate the entities, as these were legit entities, and deserve your love.

diff --git a/src/main/java/io/papermc/paper/PaperWorldConfig.java b/src/main/java/io/papermc/paper/PaperWorldConfig.java
index 3d128d30ab47fc1839f7a2e285ffaecb7bc62b3a..5e33905f40bf6b0e7bab9c87e61053285d3cc56f 100644
--- a/src/main/java/io/papermc/paper/PaperWorldConfig.java
+++ b/src/main/java/io/papermc/paper/PaperWorldConfig.java
@@ -401,4 +401,43 @@ public class PaperWorldConfig {
     private void preventMovingIntoUnloadedChunks() {
         preventMovingIntoUnloadedChunks = getBoolean("prevent-moving-into-unloaded-chunks", false);
     }
+
+    public enum DuplicateUUIDMode {
+        SAFE_REGEN, DELETE, NOTHING, WARN
+    }
+    public DuplicateUUIDMode duplicateUUIDMode = DuplicateUUIDMode.SAFE_REGEN;
+    public int duplicateUUIDDeleteRange = 32;
+    private void repairDuplicateUUID() {
+        String desiredMode = getString("duplicate-uuid-resolver", "saferegen").toLowerCase().trim();
+        duplicateUUIDDeleteRange = getInt("duplicate-uuid-saferegen-delete-range", duplicateUUIDDeleteRange);
+        switch (desiredMode.toLowerCase()) {
+            case "regen":
+            case "regenerate":
+            case "saferegen":
+            case "saferegenerate":
+                duplicateUUIDMode = DuplicateUUIDMode.SAFE_REGEN;
+                log("Duplicate UUID Resolve: Regenerate New UUID if distant (Delete likely duplicates within " + duplicateUUIDDeleteRange + " blocks)");
+                break;
+            case "remove":
+            case "delete":
+                duplicateUUIDMode = DuplicateUUIDMode.DELETE;
+                log("Duplicate UUID Resolve: Delete Entity");
+                break;
+            case "silent":
+            case "nothing":
+                duplicateUUIDMode = DuplicateUUIDMode.NOTHING;
+                logError("Duplicate UUID Resolve: Do Nothing (no logs) - Warning, may lose indication of bad things happening");
+                break;
+            case "log":
+            case "warn":
+                duplicateUUIDMode = DuplicateUUIDMode.WARN;
+                log("Duplicate UUID Resolve: Warn (do nothing but log it happened, may be spammy)");
+                break;
+            default:
+                duplicateUUIDMode = DuplicateUUIDMode.WARN;
+                logError("Warning: Invalid duplicate-uuid-resolver config " + desiredMode + " - must be one of: regen, delete, nothing, warn");
+                log("Duplicate UUID Resolve: Warn (do nothing but log it happened, may be spammy)");
+                break;
+        }
+    }
 }
diff --git a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
index ecb2694255662b5c898225686c2d795688128afa..3878baab462b56ed248df01645549be076698ae2 100644
--- a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
@@ -1,6 +1,7 @@
 package net.minecraft.server.level;
 
 import co.aikar.timings.Timing; // Paper
+import io.papermc.paper.PaperWorldConfig; // Paper
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.ComparisonChain; // Paper
@@ -23,14 +24,17 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.io.File;
 import java.io.IOException;
 import java.io.Writer;
+import java.util.HashMap; // Paper
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map; // Paper
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Queue;
 import java.util.Set;
 import java.util.concurrent.CancellationException;
+import java.util.UUID; // Paper
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.Executor;
@@ -73,6 +77,7 @@ import net.minecraft.world.entity.boss.EntityComplexPart;
 import net.minecraft.world.entity.player.EntityHuman;
 import net.minecraft.world.level.ChunkCoordIntPair;
 import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.World;
 import net.minecraft.world.level.chunk.Chunk;
 import net.minecraft.world.level.chunk.ChunkConverter;
 import net.minecraft.world.level.chunk.ChunkGenerator;
@@ -697,12 +702,12 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                             // CraftBukkit start - these are spawned serialized (DefinedStructure) and we don't call an add event below at the moment due to ordering complexities
                             boolean needsRemoval = false;
                             if (chunk.needsDecoration && !this.world.getServer().getServer().getSpawnNPCs() && entity instanceof net.minecraft.world.entity.npc.NPC) {
-                                entity.die();
+                                entity.dead = true; // Paper
                                 needsRemoval = true;
                             }
-
-                            if (!(entity instanceof EntityHuman) && (needsRemoval || !this.world.addEntityChunk(entity))) {
-                                // CraftBukkit end
+                            // CraftBukkit end
+                            checkDupeUUID(entity); // Paper
+                            if (!(entity instanceof EntityHuman) && (entity.dead || !this.world.addEntityChunk(entity))) { // Paper
                                 if (list == null) {
                                     list = Lists.newArrayList(new Entity[]{entity});
                                 } else {
@@ -729,6 +734,44 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         });
     }
 
+    // Paper start
+    private void checkDupeUUID(Entity entity) {
+        PaperWorldConfig.DuplicateUUIDMode mode = world.paperConfig.duplicateUUIDMode;
+        if (mode != PaperWorldConfig.DuplicateUUIDMode.WARN
+            && mode != PaperWorldConfig.DuplicateUUIDMode.DELETE
+            && mode != PaperWorldConfig.DuplicateUUIDMode.SAFE_REGEN) {
+            return;
+        }
+        Entity other = world.getEntity(entity.getUniqueID());
+
+        if (mode == PaperWorldConfig.DuplicateUUIDMode.SAFE_REGEN && other != null && !other.dead
+                && Objects.equals(other.getSaveID(), entity.getSaveID())
+                && entity.getBukkitEntity().getLocation().distance(other.getBukkitEntity().getLocation()) < world.paperConfig.duplicateUUIDDeleteRange
+        ) {
+            if (World.DEBUG_ENTITIES) LOGGER.warn("[DUPE-UUID] Duplicate UUID found used by " + other + ", deleted entity " + entity + " because it was near the duplicate and likely an actual duplicate. See https://github.com/PaperMC/Paper/issues/1223 for discussion on what this is about.");
+            entity.dead = true;
+            return;
+        }
+        if (other != null && !other.dead) {
+            switch (mode) {
+                case SAFE_REGEN: {
+                    entity.setUUID(UUID.randomUUID());
+                    if (World.DEBUG_ENTITIES) LOGGER.warn("[DUPE-UUID] Duplicate UUID found used by " + other + ", regenerated UUID for " + entity + ". See https://github.com/PaperMC/Paper/issues/1223 for discussion on what this is about.");
+                    break;
+                }
+                case DELETE: {
+                    if (World.DEBUG_ENTITIES) LOGGER.warn("[DUPE-UUID] Duplicate UUID found used by " + other + ", deleted entity " + entity + ". See https://github.com/PaperMC/Paper/issues/1223 for discussion on what this is about.");
+                    entity.dead = true;
+                    break;
+                }
+                default:
+                    if (World.DEBUG_ENTITIES) LOGGER.warn("[DUPE-UUID] Duplicate UUID found used by " + other + ", doing nothing to " + entity + ". See https://github.com/PaperMC/Paper/issues/1223 for discussion on what this is about.");
+                    break;
+            }
+        }
+    }
+    // Paper end
+
     public CompletableFuture<Either<Chunk, PlayerChunk.Failure>> a(PlayerChunk playerchunk) {
         ChunkCoordIntPair chunkcoordintpair = playerchunk.i();
         CompletableFuture<Either<List<IChunkAccess>, PlayerChunk.Failure>> completablefuture = this.a(chunkcoordintpair, 1, (i) -> {
diff --git a/src/main/java/net/minecraft/server/level/WorldServer.java b/src/main/java/net/minecraft/server/level/WorldServer.java
index fae7b7b68a1bd74e0d20ba6d4817ab05a924d4e1..43017d3a5b60bd459deb79e2b21ef6f51ed72db1 100644
--- a/src/main/java/net/minecraft/server/level/WorldServer.java
+++ b/src/main/java/net/minecraft/server/level/WorldServer.java
@@ -4,6 +4,8 @@ import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Iterables;
 import co.aikar.timings.TimingHistory; // Paper
 import co.aikar.timings.Timings; // Paper
+
+import io.papermc.paper.PaperWorldConfig; // Paper
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
@@ -1106,7 +1108,22 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         if (entity1 == null) {
             return false;
         } else {
+            // Paper start
+            if (entity1.dead) {
+                unregisterEntity(entity1); // remove the existing entity
+                return false;
+            }
+            // Paper end
             WorldServer.LOGGER.warn("Trying to add entity with duplicated UUID {}. Existing {}#{}, new: {}#{}", uuid, EntityTypes.getName(entity1.getEntityType()), entity1.getId(), EntityTypes.getName(entity.getEntityType()), entity.getId()); // CraftBukkit // Paper
+            // Paper start
+            if (DEBUG_ENTITIES && entity.world.paperConfig.duplicateUUIDMode != PaperWorldConfig.DuplicateUUIDMode.NOTHING) {
+                if (entity1.addedToWorldStack != null) {
+                    entity1.addedToWorldStack.printStackTrace();
+                }
+
+                getAddToWorldStackTrace(entity).printStackTrace();
+            }
+            // Paper end
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index b04cf8262c0fe13ae067e9ca1377d628f8a6ee34..aa99478a0f463e5589b144ab0e58c6a050e2cf57 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -2799,6 +2799,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
         });
     }
 
+    public final void setUUID(UUID uuid) { a_(uuid); } // Paper - OBFHELPER
     public void a_(UUID uuid) {
         this.uniqueID = uuid;
         this.ae = this.uniqueID.toString();
diff --git a/src/main/java/net/minecraft/world/level/chunk/Chunk.java b/src/main/java/net/minecraft/world/level/chunk/Chunk.java
index 5a2af921bb367c73bb6432aca1f771bc08733d64..f811ea3ca087a3948ed425eb0a9abb114c35b0ca 100644
--- a/src/main/java/net/minecraft/world/level/chunk/Chunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/Chunk.java
@@ -542,6 +542,7 @@ public class Chunk implements IChunkAccess {
         if (i != this.loc.x || j != this.loc.z) {
             Chunk.LOGGER.warn("Wrong location! ({}, {}) should be ({}, {}), {}", i, j, this.loc.x, this.loc.z, entity);
             entity.dead = true;
+            return; // Paper
         }
 
         int k = MathHelper.floor(entity.locY() / 16.0D);
