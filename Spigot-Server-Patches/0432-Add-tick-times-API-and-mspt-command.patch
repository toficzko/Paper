From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <Blake.Galbreath@GMail.com>
Date: Sun, 5 Apr 2020 22:23:14 -0500
Subject: [PATCH] Add tick times API and /mspt command


diff --git a/src/main/java/io/papermc/paper/MSPTCommand.java b/src/main/java/io/papermc/paper/MSPTCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..4f3d1844f18ff5c987c76dccf1ccb350a6dc881c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/MSPTCommand.java
@@ -0,0 +1,64 @@
+package io.papermc.paper;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.text.DecimalFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+public class MSPTCommand extends Command {
+    private static final DecimalFormat DF = new DecimalFormat("########0.0");
+
+    public MSPTCommand(String name) {
+        super(name);
+        this.description = "View server tick times";
+        this.usageMessage = "/mspt";
+        this.setPermission("bukkit.command.mspt");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        MinecraftServer server = MinecraftServer.getServer();
+
+        List<String> times = new ArrayList<>();
+        times.addAll(eval(server.tickTimes5s.getTimes()));
+        times.addAll(eval(server.tickTimes10s.getTimes()));
+        times.addAll(eval(server.tickTimes60s.getTimes()));
+
+        sender.sendMessage("§6Server tick times §e(§7avg§e/§7min§e/§7max§e)§6 from last 5s§7,§6 10s§7,§6 1m§e:");
+        sender.sendMessage(String.format("§6◴ %s§7/%s§7/%s§e, %s§7/%s§7/%s§e, %s§7/%s§7/%s", times.toArray()));
+        return true;
+    }
+
+    private static List<String> eval(long[] times) {
+        long min = Integer.MAX_VALUE;
+        long max = 0L;
+        long total = 0L;
+        for (long value : times) {
+            if (value > 0L && value < min) min = value;
+            if (value > max) max = value;
+            total += value;
+        }
+        double avgD = ((double) total / (double) times.length) * 1.0E-6D;
+        double minD = ((double) min) * 1.0E-6D;
+        double maxD = ((double) max) * 1.0E-6D;
+        return Arrays.asList(getColor(avgD), getColor(minD), getColor(maxD));
+    }
+
+    private static String getColor(double avg) {
+        return ChatColor.COLOR_CHAR + (avg >= 50 ? "c" : avg >= 40 ? "e" : "a") + DF.format(avg);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/PaperConfig.java b/src/main/java/io/papermc/paper/PaperConfig.java
index 6ac76163a7393a5ffedd84905651c6b8c6859b64..86d481601f6959879c856f32b25bdb99f45525c6 100644
--- a/src/main/java/io/papermc/paper/PaperConfig.java
+++ b/src/main/java/io/papermc/paper/PaperConfig.java
@@ -69,6 +69,7 @@ public class PaperConfig {
 
         commands = new HashMap<String, Command>();
         commands.put("paper", new PaperCommand("paper"));
+        commands.put("mspt", new MSPTCommand("mspt"));
 
         version = getInt("config-version", 20);
         set("config-version", 20);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 944e1af50295887c203d58fae3ae13b1786c4f9a..7f8315d3193164d9220ae80952b8b0459187a87f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -218,6 +218,11 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     private int F;
     private int G;
     public final long[] h; public long[] getTickTimes() { return h; } // Paper - OBFHELPER
+    // Paper start
+    public final TickTimes tickTimes5s = new TickTimes(100);
+    public final TickTimes tickTimes10s = new TickTimes(200);
+    public final TickTimes tickTimes60s = new TickTimes(1200);
+    // Paper end
     @Nullable
     private KeyPair H;
     @Nullable
@@ -1320,6 +1325,12 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.ag = this.ag * 0.8F + (float) l / 1000000.0F * 0.19999999F;
         long i1 = SystemUtils.getMonotonicNanos();
 
+        // Paper start
+        tickTimes5s.add(this.ticks, l);
+        tickTimes10s.add(this.ticks, l);
+        tickTimes60s.add(this.ticks, l);
+        // Paper end
+
         this.circularTimer.a(i1 - i);
         this.methodProfiler.exit();
         org.spigotmc.WatchdogThread.tick(); // Spigot
@@ -2292,4 +2303,30 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     public ITextFilter a(EntityPlayer entityplayer) {
         return null;
     }
+
+    // Paper start
+    public static class TickTimes {
+        private final long[] times;
+
+        public TickTimes(int length) {
+            times = new long[length];
+        }
+
+        void add(int index, long time) {
+            times[index % times.length] = time;
+        }
+
+        public long[] getTimes() {
+            return times.clone();
+        }
+
+        public double getAverage() {
+            long total = 0L;
+            for (long value : times) {
+                total += value;
+            }
+            return ((double) total / (double) times.length) * 1.0E-6D;
+        }
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 255bbb1d594df0f0ae4128c9fe98512acfc07151..cfbf507446f48219fbfad39b3e3705059cdc2128 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2196,6 +2196,16 @@ public final class CraftServer implements Server {
                 net.minecraft.server.MinecraftServer.getServer().tps15.getAverage()
         };
     }
+
+    @Override
+    public long[] getTickTimes() {
+        return getServer().tickTimes5s.getTimes();
+    }
+
+    @Override
+    public double getAverageTickTime() {
+        return getServer().tickTimes5s.getAverage();
+    }
     // Paper end
 
     // Spigot start
